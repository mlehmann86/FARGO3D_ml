//<FLAGS>
//#define __GPU
//#define __NOPROTO
//<\FLAGS>

//<INCLUDES>
#include "fargo3d.h"
//<\INCLUDES>

void Edamp_cpu(real dt) {

//<USER_DEFINED>
  INPUT(Energy);
  OUTPUT(Energy);
//<\USER_DEFINED>

//<INTERNAL>
  int i;
  int j;
  int k;
  int ll;
  real bigrad;
  real Hg;
  real R3;
  real omk;
  real cs;
  real cs2;
  real tauc;
  real DeltaRin;
  real DeltaRout;
  real TaperRin;
  real TaperRout;
  real taucbcgas;
  real betas;
  real smallq;
  real dr;
  real dz;
  real r;
//<\INTERNAL>

//<EXTERNAL>
  real* e = Energy->field_cpu;
  real* rho = Density->field_cpu;  
  real beta = BETA;
  real gam = GAMMA;
  real chi = CHI;
  real r0 = R0;
  real bigg = G;
  real mstar = MSTAR;
  real asp = ASPECTRATIO;
  real flar = FLARINGINDEX;
  real a = APAR;
  real b = BPAR;
  real beta0 = BETA0PAR;
  real beta1 = BETA1PAR;
  real ymin_val = YMIN;
  real ymax_val = YMAX;
  real bnd = BETATAPER;
  int pitch = Pitch_cpu;
  int stride = Stride_cpu;
  int size_x = Nx;
  int size_y = Ny + 2 * NGHY;
  int size_z = Nz + 2 * NGHZ;
//<\EXTERNAL>

//<CONSTANT>
// real ymed(Ny+2*NGHY+1);
// real zmed(Nz+2*NGHZ+1);
// real ymin(Ny+2*NGHY+1);
// real zmin(Nz+2*NGHZ+1);
//<\CONSTANT>

//<MAIN_LOOP>
  for (k = 1; k < size_z - 1; k++) {
    for (j = 1; j < size_y - 1; j++) {
      for (i = 0; i < size_x; i++) {
        ll = lijk(i, j, k);

#ifdef SPHERICAL
        bigrad = ymed(j) * sin(zmed(k));
#endif
#ifdef CYLINDRICAL
        bigrad = ymed(j);
#endif

        Hg = asp * pow(bigrad / r0, flar) * bigrad;
        R3 = bigrad * bigrad * bigrad;
        omk = sqrt(bigg * mstar / R3);
        cs = omk * Hg;
        cs2 = cs * cs;
        tauc = beta / omk;

#ifdef BETAZ
        smallq = 1.0 - 2.0 * flar;
        betas = beta0 * exp(zmed(k) * zmed(k) / (a * a * Hg * Hg));
        betas += beta1 * exp(-zmed(k) * zmed(k) / (b * b * Hg * Hg));
        betas *= pow((bigrad / r0), (smallq + 1.0) / 2.0);
        tauc = betas / omk;
#endif

#ifdef BTAPER
        DeltaRin  = ymin_val - R0;
        DeltaRout = ymax_val - R0;
        TaperRin  = ymin_val - bnd * DeltaRin;
        TaperRout = ymax_val - bnd * DeltaRout;
        taucbcgas = 0.125;
        tauc = beta + (beta - taucbcgas) * tanh(100.0 * (bigrad - TaperRin));
        tauc = tauc - (beta - taucbcgas) * tanh(100.0 * (bigrad - TaperRout));
        tauc = 0.5 * (tauc - beta) + taucbcgas;
        tauc = tauc / omk;
#endif

#ifdef THERMALDIFFUSION

        dr = ymed(j + 1) - ymed(j);
#ifdef Z
        dz = zmed(k + 1) - zmed(k);
#endif
#ifdef X
        real dphi = 2.0 * M_PI / Nx;
#endif

        real r = ymed(j);

        real S_c  = log(((gam - 1.0) * e[ll]) / pow(rho[ll], gam));
        real S_rp = log(((gam - 1.0) * e[ll + pitch]) / pow(rho[ll + pitch], gam));
        real S_rm = log(((gam - 1.0) * e[ll - pitch]) / pow(rho[ll - pitch], gam));

#ifdef Z
        real S_zp = log(((gam - 1.0) * e[ll + stride]) / pow(rho[ll + stride], gam));
        real S_zm = log(((gam - 1.0) * e[ll - stride]) / pow(rho[ll - stride], gam));
#endif

#ifdef X
        int ip1 = (i + 1) % Nx;
        int im1 = (i - 1 + Nx) % Nx;
        int l_ip1 = lijk(ip1, j, k);
        int l_im1 = lijk(im1, j, k);
        real S_pp = log(((gam - 1.0) * e[l_ip1]) / pow(rho[l_ip1], gam));
        real S_pm = log(((gam - 1.0) * e[l_im1]) / pow(rho[l_im1], gam));
#endif

        real dS_dr_plus  = (S_rp - S_c) / dr;
        real dS_dr_minus = (S_c - S_rm) / dr;
        real lap_r = (1.0 / r) * ((r + 0.5 * dr) * dS_dr_plus - (r - 0.5 * dr) * dS_dr_minus) / dr;

        real laplacian_S = lap_r;
#ifdef X
        real lap_phi = (S_pp - 2.0 * S_c + S_pm) / (dphi * dphi) / (r * r);
        laplacian_S += lap_phi;
#endif
#ifdef Z
        real lap_z = (S_zp - 2.0 * S_c + S_zm) / (dz * dz);
        laplacian_S += lap_z;
#endif

        e[ll] += dt * chi * e[ll] * laplacian_S;

#else
        e[ll] *= 1.0 / (1.0 + dt / tauc);
        e[ll] += rho[ll] * cs2 / ((1.0 + tauc / dt) * (gam - 1.0));
#endif

      }
    }
  }
//<\MAIN_LOOP>
}
